@using FinanceManager.UI.Models
@using Microsoft.AspNetCore.Mvc.Localization

@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = Localizer["Title"];
    Layout = "_Layout";
    const int TagsPageSize = 5;
    const int MovementsPageSize = 20;
}

<h1>@((ViewData["AccountInfo"] as AccountResponse)?.Name)</h1>

<ul class="nav nav-tabs" id="accountTab" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="nav-link @(ViewData["tab"] as string == "movement" ? "active" :"")" id="movements-tab" data-bs-toggle="tab" data-bs-target="#movements-tab-pane" type="button" role="tab" aria-controls="movements-tab-pane" aria-selected="true">@Localizer["Movements"]</button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link @(ViewData["tab"] as string == "tag" ? "active" :"")" id="tags-tab" data-bs-toggle="tab" data-bs-target="#tags-tab-pane" type="button" role="tab" aria-controls="tags-tab-pane" aria-selected="false">@Localizer["Tags"]</button>
    </li>
</ul>

<div class="tab-content" id="accountTabContent">
    <div class="tab-pane fade @(ViewData["tab"] as string == "movement" ? "show active" :"")" id="movements-tab-pane" role="tabpanel" aria-labelledby="movements-tab" tabindex="0">

        @if (ViewData.ContainsKey("ErrorMovementOperation"))
        {
            <div class="alert alert-danger" role="alert">
                @Localizer[ViewData["ErrorMovementOperation"]?.ToString()??""]
            </div>
        }
        @if (ViewData.ContainsKey("SuccessMovementOperation"))
        {
            <div class="alert alert-success" role="alert">
                @Localizer[ViewData["SuccessMovementOperation"]?.ToString()??""]
            </div>
        }

        <div class="d-flex justify-content-between mt-3">
            <p>@((ViewData["AccountInfo"] as AccountResponse)?.Description)</p>
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addMovementModal">@Localizer["AddMovement"]</button>
        </div>

        <div class="modal fade" id="addMovementModal" tabindex="-1" aria-labelledby="addMovementModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="addMovementModalLabel">@Localizer["AddMovement"]</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="add-movement-form" class="needs-validation" action="/account/createmovement" method="post" novalidate>
                            <div class="mb-3">
                                <label for="add-movement-amount" class="col-form-label">@Localizer["Amount"]</label>
                                <input type="number" class="form-control" id="add-movement-amount" name="amount" value="0.0" step="any">
                                <div id="add-movement-amount-invalid-feedback" class="invalid-feedback"></div>
                            </div>
                            <div class="mb-3">
                                <label for="add-movement-concept" class="col-form-label">@Localizer["Concept"]</label>
                                <input type="text" class="form-control" id="add-movement-concept" name="concept">
                                <div id="add-movement-concept-invalid-feedback" class="invalid-feedback"></div>
                            </div>
                            <div class="mb-3">
                                <label for="add-movement-date" class="col-form-label">@Localizer["Date"]</label>
                                <input type="date" class="form-control" id="add-movement-date" name="date">
                                <div id="add-movement-date-invalid-feedback" class="invalid-feedback"></div>
                            </div>
                            <div class="mb-3">
                                <label for="add-movement-isincoming" class="col-form-label">@Localizer["IsIncoming"]</label>
                                <select class="form-select" id="add-movement-isincoming" name="isIncoming">
                                    <option value=false>@Localizer["Outcoming"]</option>
                                    <option value=true>@Localizer["Incoming"]</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="add-movement-tags" class="col-form-label">@Localizer["Tags"]</label>
                                <input type="hidden" class="form-control" id="add-movement-tags" name="tags">
                                @{
                                    var tagList = (ViewData["AccountInfo"] as AccountResponse)?.Tags.OrderBy(tag => tag.Name).ToList() ?? new List<TagResponse>();
                                    var tagTotalPages = (int)Math.Ceiling((double)tagList.Count / TagsPageSize);
                                    for (var currentPage = 1; currentPage <= tagTotalPages; ++currentPage)
                                    {
                                                <ul class="list-group add-movement-tag-page @(currentPage > 1 ? "d-none" : "")" page="@currentPage">
                                                    @for (var currentItem = 0; currentItem < TagsPageSize; ++currentItem)
                                            {
                                                var position = ((currentPage - 1) * TagsPageSize) + currentItem;
                                                if (tagList.Count > position)
                                                {
                                                    var tag = tagList[position];
                                                            <li class="list-group-item">
                                                                <input class="form-check-input me-1 add-movement-tag-checkbox" type="checkbox" value="@tag.Id">
                                                                <span class="badge" for="firstCheckbox" style="background:@tag.Color">@tag.Name</span>
                                                            </li>
                                                }
                                            }
                                                </ul>
                                    }
                                            <nav aria-label="Tags page navigation">
                                                <ul id="tags-page-navigation" class="pagination justify-content-end mt-1">
                                                    <li class="page-item" onclick="moveToPage('add-movement-tag-page','tags-page-navigation',1)"><a class="page-link" href="#">&laquo;</a></li>
                                                    <li class="page-item d-none"><a class="page-link" href="#">...</a></li>
                                                    @for (var currentPage = 1; currentPage <= tagTotalPages; ++currentPage)
                                            {
                                                        <li class="page-item page-number @(currentPage == 1 ? "active" : "") @(currentPage > 2 ? "d-none" : "")" onclick="moveToPage('add-movement-tag-page','tags-page-navigation',@currentPage)" page="@currentPage">
                                                            <a class="page-link" href="#">@currentPage</a>

                                                        </li>
                                            }
                                                    <li class="page-item @(tagTotalPages <= 2 ? "d-none" : "")"><a class="page-link" href="#">...</a></li>
                                                    <li class="page-item" onclick="moveToPage('add-movement-tag-page','tags-page-navigation',@tagTotalPages)"><a class="page-link" href="#">&raquo;</a></li>
                                                </ul>
                                            </nav>
                                }

                            </div>
                            <input type="hidden" class="form-control" id="add-movement-account-id" name="id" value=@((ViewData["AccountInfo"] as AccountResponse)?.Id)>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@Localizer["Cancel"]</button>
                        <button id="submit-add-movement-form" type="button" class="btn btn-primary">@Localizer["AddMovement"]</button>
                    </div>
                </div>
            </div>
        </div>

        
        @{
            var movementList = (ViewData["AccountInfo"] as AccountResponse)?.Movements.OrderByDescending(m=>m.ExecutionDate).ToList() ?? new List<MovementResponse>();
            var movementTotalPages = (int)Math.Ceiling((double)movementList.Count / MovementsPageSize);
            for (var currentPage = 1; currentPage <= movementTotalPages; ++currentPage)
            {
                <div class="list-group mt-4 movement-page @(currentPage > 1 ? "d-none" : "")" page="@currentPage">
                @for (var currentItem = 0; currentItem < MovementsPageSize; ++currentItem)
                {
                    var position = ((currentPage - 1) * MovementsPageSize) + currentItem;
                    if (movementList.Count > position)
                    {
                        var movement = movementList[position];
                        <a href="/account/index?accountId=@movement.Id" class="list-group-item list-group-item-action">
                            <div class="d-flex w-100 justify-content-between">
                                <h3 class="mb-1" style="color: @(movement.IsIncoming?"green":"red");">@movement.Amount</h3>
                                <div>
                                @foreach (var tag in movement.Tags)
                                {
                                    <span class="badge" style="background:@tag.Color">@tag.Name</span>
                                }
                                </div>
                                <div class="dropdown">
                                    <i class="bi-gear btn" data-bs-toggle="dropdown"></i>
                                    <ul class="dropdown-menu dropdown-menu-end">
                                        <li><span onclick="showModalModifyMovement('@movement.Id', '@movement.Amount', '@movement.Concept', '@movement.ExecutionDate.ToString("yyyy-MM-dd")', '@movement.IsIncoming', '@String.Join(",",movement.Tags.Select(t=>t.Id))')" class="dropdown-item">@Localizer["ModifyMovement"]</span></li>
                                        <li><span onclick="showModalDeleteMovement('@movement.Id')" class="dropdown-item">@Localizer["DeleteMovement"]</span></li>
                                    </ul>
                                </div>
                            </div>
                            <div class="row">
                                <p class="col-7 mb-1">@movement.Concept</p>
                                <p class="col-4 mb-1">@movement.ExecutionDate.ToString("yyyy-MM-dd")</p>
                            </div>
                        </a>
                    }
                }
                </div>
            }
            <nav aria-label="Movements page navigation">
                <ul id="movements-page-navigation" class="pagination justify-content-end mt-1">
                    <li class="page-item" onclick="moveToPage('movement-page','movements-page-navigation',1)"><a class="page-link" href="#">&laquo;</a></li>
                    <li class="page-item d-none"><a class="page-link" href="#">...</a></li>
                    @for (var currentPage = 1; currentPage <= movementTotalPages; ++currentPage)
                    {
                        <li class="page-item page-number @(currentPage == 1 ? "active" : "") @(currentPage > 2 ? "d-none" : "")" onclick="moveToPage('movement-page','movements-page-navigation',@currentPage)" page="@currentPage">
                            <a class="page-link" href="#">@currentPage</a>

                        </li>
                    }
                    <li class="page-item @(movementTotalPages <= 2 ? "d-none" : "")"><a class="page-link" href="#">...</a></li>
                    <li class="page-item" onclick="moveToPage('movement-page','movements-page-navigation',@movementTotalPages)"><a class="page-link" href="#">&raquo;</a></li>
                </ul>
            </nav>
        }

        <div class="modal fade" id="modifyMovementModal" tabindex="-1" aria-labelledby="modifyMovementModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="modifyMovementModalLabel">@Localizer["ModifyMovement"]</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="modify-movement-form" class="needs-validation" action="/account/updatemovement" method="post" novalidate>
                            <div class="mb-3">
                                <label for="modify-movement-amount" class="col-form-label">@Localizer["Amount"]</label>
                                <input type="number" class="form-control" id="modify-movement-amount" name="amount" value="0.0" step="any">
                                <div id="modify-movement-amount-invalid-feedback" class="invalid-feedback"></div>
                            </div>
                            <div class="mb-3">
                                <label for="modify-movement-concept" class="col-form-label">@Localizer["Concept"]</label>
                                <input type="text" class="form-control" id="modify-movement-concept" name="concept">
                                <div id="modify-movement-concept-invalid-feedback" class="invalid-feedback"></div>
                            </div>
                            <div class="mb-3">
                                <label for="modify-movement-date" class="col-form-label">@Localizer["Date"]</label>
                                <input type="date" class="form-control" id="modify-movement-date" name="date">
                                <div id="modify-movement-date-invalid-feedback" class="invalid-feedback"></div>
                            </div>
                            <div class="mb-3">
                                <label for="modify-movement-isincoming" class="col-form-label">@Localizer["IsIncoming"]</label>
                                <select class="form-select" id="modify-movement-isincoming" name="isIncoming">
                                    <option value=false>@Localizer["Outcoming"]</option>
                                    <option value=true>@Localizer["Incoming"]</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="modify-movement-tags" class="col-form-label">@Localizer["Tags"]</label>
                                <input type="hidden" class="form-control" id="modify-movement-tags" name="tags">
                                <ul class="list-group">
                                    @foreach (var tag in (ViewData["AccountInfo"] as AccountResponse)?.Tags ?? new List<TagResponse>())
                                    {
                                        <li class="list-group-item">
                                            <input id="modify-movement-tag-checkbox-@tag.Id" class="form-check-input me-1 modify-movement-tag-checkbox" type="checkbox" value="@tag.Id">
                                            <span class="badge" for="firstCheckbox" style="background:@tag.Color">@tag.Name</span>
                                        </li>
                                    }
                                </ul>
                            </div>
                            <input type="hidden" class="form-control" id="modify-movement-id" name="movementId">
                            <input type="hidden" class="form-control" id="modify-movement-account-id" name="accountId" value=@((ViewData["AccountInfo"] as AccountResponse)?.Id)>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@Localizer["Cancel"]</button>
                        <button id="submit-modify-movement-form" type="button" class="btn btn-primary">@Localizer["ModifyMovement"]</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="deleteMovementModal" tabindex="-1" aria-labelledby="deleteMovementModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="deleteMovementModalLabel">@Localizer["DeleteMovementConfirmationTitle"]</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        @Localizer["DeleteMovementConfirmationMessage"]
                        <form id="delete-movement-form" class="needs-validation" action="/account/deletemovement" method="post" novalidate>
                            <input type="hidden" class="form-control" id="delete-movement-id" name="movementId">
                            <input type="hidden" class="form-control" id="delete-movement-account-id" name="accountId" value=@((ViewData["AccountInfo"] as AccountResponse)?.Id)>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@Localizer["DeleteMovementConfirmationNegative"]</button>
                        <button id="submit-delete-movement-form" type="button" class="btn btn-danger">@Localizer["DeleteMovementConfirmationAffirmative"]</button>
                    </div>
                </div>
            </div>
        </div>
    </div>



<div class="tab-pane fade @(ViewData["tab"] as string == "tag" ? "show active" :"")" id="tags-tab-pane" role="tabpanel" aria-labelledby="tags-tab" tabindex="0">

    @if (ViewData.ContainsKey("ErrorTagOperation"))
    {
        <div class="alert alert-danger" role="alert">
            @Localizer[ViewData["ErrorTagOperation"]?.ToString()??""]
        </div>
    }
    @if (ViewData.ContainsKey("SuccessTagOperation"))
    {
        <div class="alert alert-success" role="alert">
            @Localizer[ViewData["SuccessTagOperation"]?.ToString()??""]
        </div>
    }

    <div class="d-flex justify-content-between mt-3">
        <p>@Localizer["MainTagMessage"]</p>
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addTagModal">@Localizer["AddTag"]</button>

        <div class="modal fade" id="addTagModal" tabindex="-1" aria-labelledby="addTagModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="addTagModalLabel">@Localizer["AddTag"]</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="add-tag-form" class="needs-validation" action="/account/createtag" method="post" novalidate>
                            <div class="mb-3">
                                <label for="add-tag-name" class="col-form-label">@Localizer["Name"]</label>
                                <input type="text" class="form-control" id="add-tag-name" name="name">
                                <div id="add-tag-name-invalid-feedback" class="invalid-feedback"></div>
                            </div>
                            <div class="mb-3">
                                <label for="add-tag-color" class="col-form-label">@Localizer["Color"]</label>
                                <input type="color" class="form-control" id="add-tag-color" name="color">
                                <div id="add-tag-color-invalid-feedback" class="invalid-feedback"></div>
                            </div>
                            <input type="hidden" class="form-control" id="add-tag-account-id" name="id" value=@((ViewData["AccountInfo"] as AccountResponse)?.Id)>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@Localizer["Cancel"]</button>
                        <button id="submit-add-tag-form" type="button" class="btn btn-primary">@Localizer["AddTag"]</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="d-flex justify-content-evenly mt-3">
        @foreach (var tag in (ViewData["AccountInfo"] as AccountResponse)?.Tags ?? new List<TagResponse>())
        {
            <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false" style="background:@tag.Color">
                    @tag.Name
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li><span onclick="showModalModifyTag('@tag.Id', '@tag.Name', '@tag.Color')" class="dropdown-item">@Localizer["ModifyTag"]</span></li>
                    <li><span onclick="showModalDeleteTag('@tag.Id')" class="dropdown-item">@Localizer["DeleteTag"]</span></li>
                </ul>
            </div>
        }
    </div>

    <div class="modal fade" id="modifyTagModal" tabindex="-1" aria-labelledby="modifyTagModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="modifyTagModalLabel">@Localizer["ModifyTag"]</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="modify-tag-form" class="needs-validation" action="/account/updatetag" method="post" novalidate>
                        <div class="mb-3">
                            <label for="modify-tag-name" class="col-form-label">@Localizer["Name"]</label>
                            <input type="text" class="form-control" id="modify-tag-name" name="name">
                            <div id="modify-tag-name-invalid-feedback" class="invalid-feedback"></div>
                        </div>
                        <div class="mb-3">
                            <label for="modify-tag-color" class="col-form-label">@Localizer["Color"]</label>
                            <input type="color" class="form-control" id="modify-tag-color" name="color">
                            <div id="modify-tag-color-invalid-feedback" class="invalid-feedback"></div>
                        </div>
                        <input type="hidden" class="form-control" id="modify-tag-id" name="tagId">
                        <input type="hidden" class="form-control" id="modify-tag-account-id" name="accountId" value=@((ViewData["AccountInfo"] as AccountResponse)?.Id)>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@Localizer["Cancel"]</button>
                    <button id="submit-modify-tag-form" type="button" class="btn btn-primary">@Localizer["ModifyTag"]</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="deleteTagModal" tabindex="-1" aria-labelledby="deleteTagModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="deleteTagModalLabel">@Localizer["DeleteTagConfirmationTitle"]</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @Localizer["DeleteTagConfirmationMessage"]
                    <form id="delete-tag-form" class="needs-validation" action="/account/deletetag" method="post" novalidate>
                        <input type="hidden" class="form-control" id="delete-tag-id" name="tagId">
                        <input type="hidden" class="form-control" id="delete-tag-account-id" name="accountId" value=@((ViewData["AccountInfo"] as AccountResponse)?.Id)>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@Localizer["DeleteTagConfirmationNegative"]</button>
                    <button id="submit-delete-tag-form" type="button" class="btn btn-danger">@Localizer["DeleteTagConfirmationAffirmative"]</button>
                </div>
            </div>
        </div>
    </div>
</div>
</div>

@section scripts{
    <script>
        //form
        var add_movement_form = document.getElementById("add-movement-form");
        var add_movement_button = document.getElementById("submit-add-movement-form");
        var modify_movement_form = document.getElementById("modify-movement-form");
        var modify_movement_button = document.getElementById("submit-modify-movement-form");
        var delete_movement_form = document.getElementById("delete-movement-form");
        var delete_movement_button = document.getElementById("submit-delete-movement-form");
        var add_tag_form = document.getElementById("add-tag-form");
        var add_tag_button = document.getElementById("submit-add-tag-form");
        var modify_tag_form = document.getElementById("modify-tag-form");
        var modify_tag_button = document.getElementById("submit-modify-tag-form");
        var delete_tag_form = document.getElementById("delete-tag-form");
        var delete_tag_button = document.getElementById("submit-delete-tag-form");
        //inputs
        var add_movement_amount = document.getElementById("add-movement-amount");
        var add_movement_concept = document.getElementById("add-movement-concept");
        var add_movement_date = document.getElementById("add-movement-date");
        var add_movement_isincoming = document.getElementById("add-movement-isincoming");
        var add_movement_tags = document.getElementById("add-movement-tags");
        var add_movement_account_id = document.getElementById("add-movement-account-id");
        var modify_movement_amount = document.getElementById("modify-movement-amount");
        var modify_movement_concept = document.getElementById("modify-movement-concept");
        var modify_movement_date = document.getElementById("modify-movement-date");
        var modify_movement_isincoming = document.getElementById("modify-movement-isincoming");
        var modify_movement_tags = document.getElementById("modify-movement-tags");
        var modify_movement_id = document.getElementById("modify-movement-id");
        var modify_movement_account_id = document.getElementById("modify-movement-account-id");
        var delete_movement_id = document.getElementById("delete-movement-id");
        var add_tag_name = document.getElementById("add-tag-name");
        var add_tag_color = document.getElementById("add-tag-color");
        var add_tag_account_id = document.getElementById("add-tag-account-id");
        var modify_tag_id = document.getElementById("modify-tag-id");
        var modify_tag_name = document.getElementById("modify-tag-name");
        var modify_tag_color = document.getElementById("modify-tag-color");
        var delete_tag_id = document.getElementById("delete-tag-id");
        //messages
        var add_movement_amount_invalid_feedback = document.getElementById("add-movement-amount-invalid-feedback");
        var add_movement_concept_invalid_feedback = document.getElementById("add-movement-concept-invalid-feedback");
        var add_movement_date_invalid_feedback = document.getElementById("add-movement-date-invalid-feedback");
        var modify_movement_amount_invalid_feedback = document.getElementById("modify-movement-amount-invalid-feedback");
        var modify_movement_concept_invalid_feedback = document.getElementById("modify-movement-concept-invalid-feedback");
        var modify_movement_date_invalid_feedback = document.getElementById("modify-movement-date-invalid-feedback");
        var add_tag_name_invalid_feedback = document.getElementById("add-tag-name-invalid-feedback");
        var add_tag_color_invalid_feedback = document.getElementById("add-tag-color-invalid-feedback");
        var modify_tag_name_invalid_feedback = document.getElementById("modify-tag-name-invalid-feedback");
        var modify_tag_color_invalid_feedback = document.getElementById("modify-tag-color-invalid-feedback");

        //form validation
        function validateAddMovementForm() {
            var valid = true;

            add_movement_amount.setCustomValidity("");
            if (add_movement_amount.value == "") {
                add_movement_amount.setCustomValidity("@Localizer["RequiredField"]");
                valid = false;
            } else if (add_movement_amount.value <= 0) {
                add_movement_amount.setCustomValidity("@Localizer["MustBePositive"]");
                valid = false;
            }

            add_movement_concept.setCustomValidity("");
            if (add_movement_concept.value == "") {
                add_movement_concept.setCustomValidity("@Localizer["RequiredField"]");
                valid = false;
            }

            add_movement_date.setCustomValidity("");
            if (add_movement_date.value == "") {
                add_movement_date.setCustomValidity("@Localizer["RequiredField"]");
                valid = false;
            }

            add_movement_amount.parentNode.classList.add('was-validated');
            add_movement_concept.parentNode.classList.add('was-validated');
            add_movement_date.parentNode.classList.add('was-validated');
            add_movement_amount_invalid_feedback.innerText = add_movement_amount.validationMessage;
            add_movement_concept_invalid_feedback.innerText = add_movement_concept.validationMessage;
            add_movement_date_invalid_feedback.innerText = add_movement_date.validationMessage;

            return valid;
        }

        function validateModifyMovementForm() {
            var valid = true;

            modify_movement_amount.setCustomValidity("");
            if (modify_movement_amount.value == "") {
                modify_movement_amount.setCustomValidity("@Localizer["RequiredField"]");
                valid = false;
            } else if (modify_movement_amount.value <= 0) {
                modify_movement_amount.setCustomValidity("@Localizer["MustBePositive"]");
                valid = false;
            }

            modify_movement_concept.setCustomValidity("");
            if (modify_movement_concept.value == "") {
                modify_movement_concept.setCustomValidity("@Localizer["RequiredField"]");
                valid = false;
            }

            modify_movement_date.setCustomValidity("");
            if (modify_movement_date.value == "") {
                modify_movement_date.setCustomValidity("@Localizer["RequiredField"]");
                valid = false;
            }

            modify_movement_amount.parentNode.classList.add('was-validated');
            modify_movement_concept.parentNode.classList.add('was-validated');
            modify_movement_date.parentNode.classList.add('was-validated');
            modify_movement_amount_invalid_feedback.innerText = modify_movement_amount.validationMessage;
            modify_movement_concept_invalid_feedback.innerText = modify_movement_concept.validationMessage;
            modify_movement_date_invalid_feedback.innerText = modify_movement_date.validationMessage;

            return valid;
        }

        function validateAddTagForm() {
            var valid = true;

            add_tag_name.setCustomValidity("");
            if (add_tag_name.value == "") {
                add_tag_name.setCustomValidity("@Localizer["RequiredField"]");
                valid = false;
            }

            add_tag_color.setCustomValidity("");
            if (add_tag_color.value == "") {
                add_tag_color.setCustomValidity("@Localizer["RequiredField"]");
                valid = false;
            }

            add_tag_name.parentNode.classList.add('was-validated');
            add_tag_color.parentNode.classList.add('was-validated');
            add_tag_name_invalid_feedback.innerText = add_tag_name.validationMessage;
            add_tag_color_invalid_feedback.innerText = add_tag_color.validationMessage;

            return valid;
        }

        function validateModifyTagForm() {
            var valid = true;

            modify_tag_name.setCustomValidity("");
            if (modify_tag_name.value == "") {
                modify_tag_name.setCustomValidity("@Localizer["RequiredField"]");
                valid = false;
            }

            modify_tag_color.setCustomValidity("");
            if (modify_tag_color.value == "") {
                modify_tag_color.setCustomValidity("@Localizer["RequiredField"]");
                valid = false;
            }

            modify_tag_name.parentNode.classList.add('was-validated');
            modify_tag_color.parentNode.classList.add('was-validated');
            modify_tag_name_invalid_feedback.innerText = modify_tag_name.validationMessage;
            modify_tag_color_invalid_feedback.innerText = modify_tag_color.validationMessage;

            return valid;
        }

        //event listeners
        add_movement_button.addEventListener('click', event => {
            if (!validateAddMovementForm()) {
                event.preventDefault();
                event.stopPropagation();
            } else {

                var selectedTags = [];
                document.querySelectorAll(".add-movement-tag-checkbox").forEach(function (checkbox) {
                    if (checkbox.checked) {
                        selectedTags.push(checkbox.value);
                    }
                });

                $("#add-movement-tags").val(selectedTags.join(','));

                add_movement_form.submit();
            }
        }, false);

        add_movement_amount.addEventListener('keypress', event => {
            var keyPressed = event.keyCode || event.which;
            if (!validateAddMovementForm() && keyPressed === 13) {
                event.preventDefault();
                return false;
            }
        }, false);

        add_movement_concept.addEventListener('keypress', event => {
            var keyPressed = event.keyCode || event.which;
            if (!validateAddMovementForm() && keyPressed === 13) {
                event.preventDefault();
                return false;
            }
        }, false);

        add_movement_date.addEventListener('keypress', event => {
            var keyPressed = event.keyCode || event.which;
            if (!validateAddMovementForm() && keyPressed === 13) {
                event.preventDefault();
                return false;
            }
        }, false);

        add_movement_date.addEventListener('change', event => {
            validateAddMovementForm();
        }, false);

        modify_movement_button.addEventListener('click', event => {
            if (!validateModifyMovementForm()) {
                event.preventDefault();
                event.stopPropagation();
            } else {

                var selectedTags = [];
                document.querySelectorAll(".modify-movement-tag-checkbox").forEach(function (checkbox) {
                    if (checkbox.checked) {
                        selectedTags.push(checkbox.value);
                    }
                });

                $("#modify-movement-tags").val(selectedTags.join(','));

                modify_movement_form.submit();
            }
        }, false);

        modify_movement_amount.addEventListener('keypress', event => {
            var keyPressed = event.keyCode || event.which;
            if (!validateModifyMovementForm() && keyPressed === 13) {
                event.preventDefault();
                return false;
            }
        }, false);

        modify_movement_concept.addEventListener('keypress', event => {
            var keyPressed = event.keyCode || event.which;
            if (!validateModifyMovementForm() && keyPressed === 13) {
                event.preventDefault();
                return false;
            }
        }, false);

        modify_movement_date.addEventListener('keypress', event => {
            var keyPressed = event.keyCode || event.which;
            if (!validateModifyMovementForm() && keyPressed === 13) {
                event.preventDefault();
                return false;
            }
        }, false);

        modify_movement_date.addEventListener('change', event => {
            validateModifyMovementForm();
        }, false);

        delete_movement_button.addEventListener('click', event => {
            delete_movement_form.submit();
        }, false);

        add_tag_button.addEventListener('click', event => {
            if (!validateAddTagForm()) {
                event.preventDefault();
                event.stopPropagation();
            } else {
                add_tag_form.submit();
            }
        }, false);

        add_tag_name.addEventListener('keypress', event => {
            var keyPressed = event.keyCode || event.which;
            if (!validateAddTagForm() && keyPressed === 13) {
                event.preventDefault();
                return false;
            }
        }, false);

        add_tag_color.addEventListener('change', event => {
            validateAddTagForm();
        }, false);

        modify_tag_button.addEventListener('click', event => {
            if (!validateModifyTagForm()) {
                event.preventDefault();
                event.stopPropagation();
            } else {
                modify_tag_form.submit();
            }
        }, false);

        modify_tag_name.addEventListener('keypress', event => {
            var keyPressed = event.keyCode || event.which;
            if (!validateModifyTagForm() && keyPressed === 13) {
                event.preventDefault();
                return false;
            }
        }, false);

        modify_tag_color.addEventListener('change', event => {
            validateModifyTagForm();
        }, false);

        delete_tag_button.addEventListener('click', event => {
            delete_tag_form.submit();
        }, false);

        function showModalModifyMovement(movementId, movementAmount, movementConcept, movementDate, movementIsIncoming, movementTags) {
            modify_movement_id.value = movementId;
            modify_movement_amount.value = parseFloat(movementAmount.replace(",", "."));
            modify_movement_concept.value = movementConcept;
            modify_movement_date.value = movementDate;
            modify_movement_isincoming.value = movementIsIncoming.toLowerCase();

            movementTags.split(",").forEach(function (tagId) {
                if (tagId != '') {
                    document.querySelector("#modify-movement-tag-checkbox-" + tagId).checked = true;
                }
            });

            $('#modifyMovementModal').modal('show');
            event.preventDefault();
        }

        function showModalDeleteMovement(movementId) {
            delete_movement_id.value = movementId;
            $('#deleteMovementModal').modal('show');
            event.preventDefault();
        }

        function showModalModifyTag(tagId, tagName, tagColor) {
            modify_tag_id.value = tagId;
            modify_tag_name.value = tagName;
            modify_tag_color.value = tagColor;
            $('#modifyTagModal').modal('show');
            event.preventDefault();
        }

        function showModalDeleteTag(tagId) {
            delete_tag_id.value = tagId;
            $('#deleteTagModal').modal('show');
            event.preventDefault();
        }

        function moveToPage(itemListClass, pagesListId, page) {
            $('#' + pagesListId + ' > .page-number').each(function () {
                if ($(this).attr("page") < (page - 1) || $(this).attr("page") > (page + 1)) {
                    $(this).addClass("d-none");
                } else {
                    $(this).removeClass("d-none");
                    if ($(this).attr("page") == page) {
                        $(this).addClass("active");
                    } else {
                        $(this).removeClass("active");
                    }
                }
            });

            if (page > 2) {
                $($('#' + pagesListId).children()[1]).removeClass("d-none");
            } else {
                $($('#' + pagesListId).children()[1]).addClass("d-none");
            }

            if (page < $('#' + pagesListId + ' > .page-number').length - 1) {
                $($('#' + pagesListId).children()[$('#' + pagesListId).children().length - 2]).removeClass("d-none");
            } else {
                $($('#' + pagesListId).children()[$('#' + pagesListId).children().length - 2]).addClass("d-none");
            }

            $('.' + itemListClass).each(function () {
                if($(this).attr("page") == page){
                    $(this).removeClass("d-none");
                }else{
                    $(this).addClass("d-none");
                }
            });
        }
    </script>
}