@using Microsoft.AspNetCore.Mvc.Localization

@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = Localizer["Title"];
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<form id="login-form" class="needs-validation" action="/authentication/login" method="post" novalidate>
    <div class="form-group">
        <label for="email">@Localizer["EmailLabel"]</label>
        <input type="email" class="form-control" id="Email" name="Email">
        <div id="Email-invalid-feedback" class="invalid-feedback"></div>
    </div>
    <div class="form-group">
        <label for="Password">@Localizer["PasswordLabel"]</label>
        <input type="password" class="form-control" id="Password" name="Password">
        <div id="Password-invalid-feedback" class="invalid-feedback"></div>
    </div>
    <div class="form-check">
        <input type="checkbox" class="form-check-input no-validate" id="RememberMe" name="RememberMe" value="true">
        <label class="form-check-label no-validate" for="RememberMe">@Localizer["RememberMe"]</label>
    </div>
    <button type="submit" class="btn btn-primary">@Localizer["LoginButton"]</button>
</form>

@section scripts{
    <script>

        //form
        var form = document.getElementById("login-form");
        //inputs
        var email = document.getElementById("Email");
        var password = document.getElementById("Password");
        //messages
        var email_invalid_feedback = document.getElementById("Email-invalid-feedback");
        var password_invalid_feedback = document.getElementById("Password-invalid-feedback");

        function validateForm(form) {
            var valid = true;

            email.setCustomValidity("");
            if (email.value == "") {
                email.setCustomValidity("@Localizer["RequiredField"]");
                valid = false;
            }
            else if (!(/^[a-z0-9!'#$%&*+\/=?^_`{|}~-]+(?:\.[a-z0-9!'#$%&*+\/=?^_`{|}~-]+)*@@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-zA-Z]{2,}$/.test(email.value))) {
                email.setCustomValidity("@Localizer["InvalidFormat"]");
                valid = false;
            }

            password.setCustomValidity("");
            if (password.value == "") {
                password.setCustomValidity("@Localizer["RequiredField"]");
                valid = false;
            }
            else if (!(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^a-zA-Z0-9]).{8,}$/.test(password.value))) {
                password.setCustomValidity("@Localizer["PasswordRestriction"]");
                valid = false;
            }

            email.parentNode.classList.add('was-validated');
            password.parentNode.classList.add('was-validated');
            email_invalid_feedback.innerText = email.validationMessage;
            password_invalid_feedback.innerText = password.validationMessage;

            return valid;
        }


        form.addEventListener('submit', event => {
            if (!validateForm(form)) {
                event.preventDefault()
                event.stopPropagation()
            }
        }, false);

        email.addEventListener('keyup', event => {
            validateForm(form);
        }, false);

        password.addEventListener('keyup', event => {
            validateForm(form);
        }, false);

    </script>
}
